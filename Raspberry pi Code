import cv2
import os
import numpy as np
import pytesseract
import re
import sqlite3
from datetime import datetime
import time
import RPi.GPIO as GPIO
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
GPIO.setwarnings(False)
LED_PIN = 18  
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.output(LED_PIN, GPIO.LOW)

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = "your.email@gmail.com"  # Replace with your email
SENDER_PASSWORD = "your_app_password"  # Generate app password in Google Account
RECEIVER_EMAIL = "admin.email@gmail.com"  # Replace with recipient email

def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
        print("Email notification sent successfully")
    except Exception as e:
        print(f"Failed to send email: {str(e)}")

def detect_and_extract_number_plate(image_path):
    harcascade = "/home/raspberrypi/Desktop/model/haarcascade_russian_plate_number.xml"
    plate_cascade = cv2.CascadeClassifier(harcascade)

    img = cv2.imread(image_path)
    if img is None:
        print("Error: Could not load image.")
        return None

    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img_gray = cv2.GaussianBlur(img_gray, (5, 5), 0)
    plates = plate_cascade.detectMultiScale(img_gray, 1.1, 4)

    os.makedirs("plates", exist_ok=True)
    min_area = 500
    count = 0
    plate_mask = np.zeros_like(img)

    for (x, y, w, h) in plates:
        area = w * h
        if area > min_area:
            img_roi = img[y:y + h, x:x + w]
            plate_mask[y:y + h, x:x + w] = img[y:y + h, x:x + w]
            filename = os.path.join("plates", f"plate_only_{count}.jpg")
            cv2.imwrite(filename, plate_mask)
            print(f"Plate saved: {filename}")
            count += 1

    if count == 0:
        print("No plates detected.")
        return None

    img = cv2.imread("plates/plate_only_0.jpg")
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
    gray = cv2.resize(gray, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
    cv2.imwrite("processed.jpg", gray)

    text = pytesseract.image_to_string(gray, config='--psm 7')
    clean_text = re.sub(r'[^A-Za-z0-9]', '', text)

    return clean_text

def initialize_database():
    conn = sqlite3.connect('/home/raspberrypi/Desktop/slot_booking.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            employee_id TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            phnumber TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            slot_id INTEGER NOT NULL,
            date TEXT NOT NULL,
            in_time TEXT NOT NULL,
            out_time TEXT NOT NULL,
            vehicle_number TEXT NOT NULL,
            mobile_number TEXT NOT NULL,
            status TEXT DEFAULT 'available',
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    conn.commit()
    cursor.close()
    conn.close()
    print("Database initialized successfully.")

def match_with_database(extracted_text, slot_id=1):
    if not extracted_text:
        print("No text extracted from the number plate.")
        return False

    conn = sqlite3.connect('/home/raspberrypi/Desktop/slot_booking.db')
    cursor = conn.cursor()

    extracted_text_clean = extracted_text.replace(" ", "").upper()

    # Get current date and time
    current_datetime = datetime.now()
    current_date = current_datetime.strftime('%Y-%m-%d')
    current_time = current_datetime.strftime('%H:%M')

    # Check for matching booking
    cursor.execute('''
        SELECT vehicle_number, date, in_time, out_time 
        FROM bookings 
        WHERE slot_id = ? AND status = 'booked'
    ''', (slot_id,))
    
    bookings = cursor.fetchall()
    match_found = False
    alert_details = {}

    for booking in bookings:
        vehicle_number, date, in_time, out_time = booking
        vehicle_number_clean = vehicle_number.replace(" ", "").upper()

        print(f"Checking booking: {vehicle_number_clean} (Slot: {slot_id})")

        if extracted_text_clean == vehicle_number_clean:
            if date == current_date:
                if in_time <= current_time <= out_time:
                    match_found = True
                    break
                else:
                    alert_details = {
                        'type': 'time_mismatch',
                        'vehicle': vehicle_number,
                        'current_time': current_time,
                        'booked_time': f"{in_time} to {out_time}"
                    }
            else:
                alert_details = {
                    'type': 'date_mismatch',
                    'vehicle': vehicle_number,
                    'current_date': current_date,
                    'booked_date': date
                }
        else:
            alert_details = {
                'type': 'unauthorized_vehicle',
                'expected_vehicle': vehicle_number,
                'detected_vehicle': extracted_text
            }

    # Send alert if mismatch found
    if not match_found and alert_details:
        if alert_details['type'] == 'time_mismatch':
            subject = f"Parking Time Violation - Slot {slot_id}"
            body = f"""ALERT: Time violation detected!
            
            Vehicle: {alert_details['vehicle']}
            Slot: {slot_id}
            Current Time: {alert_details['current_time']}
            Booked Time: {alert_details['booked_time']}
            
            Vehicle is parked outside booked time slot.
            """
        elif alert_details['type'] == 'date_mismatch':
            subject = f"Parking Date Violation - Slot {slot_id}"
            body = f"""ALERT: Date violation detected!
            
            Vehicle: {alert_details['vehicle']}
            Slot: {slot_id}
            Current Date: {alert_details['current_date']}
            Booked Date: {alert_details['booked_date']}
            
            Vehicle is parked on wrong date.
            """
        else:
            subject = f"Unauthorized Vehicle - Slot {slot_id}"
            body = f"""ALERT: Unauthorized vehicle detected!
            
            Slot: {slot_id}
            Expected Vehicle: {alert_details['expected_vehicle']}
            Detected Vehicle: {alert_details['detected_vehicle']}
            
            An unauthorized vehicle is occupying the parking slot.
            """
        
        send_email(subject, body)

    cursor.close()
    conn.close()
    return match_found

if _name_ == "_main_":
    initialize_database()
    image_path = "/home/raspberrypi/Desktop/image2.jpg"

    try:
        while True:
            print("\n" + "="*50)
            print(f"Starting plate detection at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            extracted_text = detect_and_extract_number_plate(image_path)
            
            if extracted_text:
                if match_with_database(extracted_text, slot_id=1):
                    GPIO.output(LED_PIN, GPIO.HIGH)
                    print("Access GRANTED - Valid vehicle and booking")
                else:
                    GPIO.output(LED_PIN, GPIO.LOW)
                    print("Access DENIED - Invalid vehicle or booking")
            else:
                print("No plate detected or extraction failed")
            
            print(f"Next scan in 5 minutes...")
            time.sleep(300)  # 300 seconds = 5 minutes

    except KeyboardInterrupt:
        print("\nProgram stopped by user")
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
    finally:
        GPIO.cleanup()
        print("GPIO cleanup completed")
